{
  "name": "Datetimepicker",
  "tagline": "",
  "body": "You have spent man-years of effort and many dollars to create your existing software suite. Do you know what you have? Which parts are critical to your production? Are you sure you have the source code? Which run-streams, programs, files and databases are obsolete? Which are duplicated? You may want to migrate an application suite to a new platform. Can you determine just which components would need conversion? You need to add a field to a file, which programs will be affected? Are your business rules being consistently applied?\r\n\r\nAll of these questions and more could be answered if you had a detailed inventory or repository of all of your software assets. Very few sites attempt this because it is so hard to ensure its continued accuracy. Every time a program or job stream is modified the inventory may need to be updated. Unless every change is recorded the inventory rapidly becomes outdated and thus useless.\r\n\r\nDatetimepicker instead, maintains collections of tagged and compressed XML data files extracted from each source document. When the timestamp changes on any document, only its file in the collection needs to be refreshed and this can be an automated process.\r\n\r\nThe Datetimepicker parser applies a user modifiable set of phrase patterns to the source document in order to recognize and tag key information in the document. Multiple parser patterns may be applied to a source document for different purposes.\r\n\r\nAs each document is added to the collection, 4Sight dynamically updates a composite overview of the available information. All extracted information is also hyper-linked to its original location in the source document for immediate viewing of the original code in the 4Sight Browser.\r\n\r\nComplementing the flexible information structure of 4Sight is a simple but powerful query language. It is specified in a similar way to the search for a file in a directory system. For example to extract a nested list of all records of all files used by program XYZ the query would be:\r\n\r\n###program=\"XYZ\"/file/record.\r\n\r\nBecause software is best constructed as a nested set of components, the query facility to be most useful, must support recursive search. A simple example of this kind of query is \"Which programs ultimately call program ‘XYZ’?\". 4Sight queries can be constructed from existing queries and use wildcard values allowing recursion and data selection facilities, that exceed that of the today’s typical relational databases.\r\n\r\nThe results of the query can be retained as part of the collection allowing historical tracking of system changes. The result can also be automatically plotted graphically to better visualize the relationships involved.\r\n\r\n###The Benefits:\r\n\r\nVisibility of software assets\r\nIdentification of critical or redundant sources\r\nQuality assurance\r\nComponent dependency tracking\r\nBusiness rule auditing\r\nChange impact analysis\r\nSystem documentation\r\nMaintenance acceleration through program understanding",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}